@page "/Goods"
@using AntDesign.TableModels;


<PageContainer Title="商品管理">
    <div>
        <div style="margin-bottom:20px"> <Button Type="primary" OnClick="@(()=>{ _title="新增"; _visible = true;})">新增</Button></div>
        <Modal Title="@_title"
               Visible="@_visible"
               OnOk="@Add"
               OnCancel="@(()=>{_visible = false;})">

            <Form Loading="false" Model="@_Goods"
                  LabelColSpan="4"
                  WrapperColSpan="20">
                <FormItem Label="名称">
                    <Input @bind-Value="@_Goods.Name" />
                </FormItem>
                <FormItem Label="标价">
                    <AntDesign.InputNumber @bind-Value="@_Goods.Price" />
                </FormItem>
                <FormItem Label="销售价">
                    <AntDesign.InputNumber @bind-Value="@_Goods.RealPrice" />
                </FormItem>
            </Form>
        </Modal>

        <Table TItem="GoodsDto" DataSource="_Goodss" PageIndex="@_pageIndex" PageSize="@_pageSize" Total="@_totalCount" OnChange="OnChange">
            <GenerateColumns Range="1.." />
            <ActionColumn Title="Action">
                <Space Size=@("middle")>
                    <SpaceItem>
                        <Button OnClick="async ()=>{await Edit(context);}">编辑</Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Danger OnClick="async ()=>{await Delete(context.Id);}">删除</Button>
                        </SpaceItem>
                        </Space>
                        </ActionColumn>
                        </Table>
                    </div>
                    </PageContainer>


                    @code {
    @inject IGoodsService _GoodsService
    @inject INotificationService _notice
    bool _visible = false;
    string _title = "";
    GoodsDto _Goods = new GoodsDto();
    List<GoodsDto> _Goodss = new List<GoodsDto>();
    int _pageIndex = 1;
    int _pageSize = 10;
    int _totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await PageList(_pageIndex, _pageSize);
    }


    public async Task OnChange(QueryModel<GoodsDto> queryModel)
    {
        _pageIndex = queryModel.PageIndex;
        await PageList(queryModel.PageIndex, queryModel.PageSize);
    }



    private async Task PageList(int pageIndex, int pageSize)
    {
        var result = await _GoodsService.pagedList(pageIndex, pageSize);
        _Goodss = result.Items.ToList();
        _totalCount = result.TotalCount;
    }


    private async Task Add()
    {
        await Wrap(async () =>
        {
            if (_title == "新增")
            {
                _Goods.Id = 0;
                await _GoodsService.Add(_Goods);
            }
            else
            {
                await _GoodsService.Update(_Goods);
            }

            _visible = false;
            _Goods = new GoodsDto();
            await PageList(_pageIndex, _pageSize);
        });
    }

    private async Task Delete(long id)
    {
        await Wrap(async () =>
        {
            await _GoodsService.Delete(id);
            await PageList(_pageIndex, _pageSize);
        });
    }

    private async Task Edit(GoodsDto context)
    {
        _title = "编辑";
        _Goods = context;
        _visible = true;
    }


    public async Task Wrap(Action action)
    {
        try
        {
            action();
            await _notice.Open(new NotificationConfig()
                {
                    Message = "Success",
                    Description = "操作成功",
                    NotificationType = NotificationType.Success
                });
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig()
                {
                    Message = "Error",
                    Description = ex.Message,
                    NotificationType = NotificationType.Error
                });
        }
    }

}
